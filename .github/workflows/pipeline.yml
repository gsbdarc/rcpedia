name: DeployStanford

on:
  issues:
    types: [opened]
  workflow_dispatch:  # Allow
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'QA'
  push:
    branches:
      - QA
      
permissions:
  actions: write  # Needed to update GitHub Actions variables
  issues: write   # Needed to create, update, or close issues
  contents: write # Needed to commit changes to the repository

jobs:
  check_airtable_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Print Issue Details
        env:
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
          STATE: ${{ github.event.issue.state }}
        run: |
          echo "Issue Title: $TITLE"
          echo "Issue Body: $BODY"
          echo "Issue State: $STATE"

      - name: Check if Issue is Open and from Airtable
        env:
          TITLE: ${{ github.event.issue.title }}
          STATE: ${{ github.event.issue.state }}
        run: |
          if [[ -z "$TITLE" ]]; then
            echo "⚠️ Manual run detected. No issue context available."
            exit 0
          fi

          if [[ "$STATE" == "open" && "$TITLE" == Airtable:* ]]; then
            echo "✅ This is an open issue created from Airtable."
          else
            echo "⏭️ Skipping: This issue is either closed or not from Airtable."
            exit 0
          fi
  update-variables:
    runs-on: ubuntu-latest
    if: >
        github.event_name == 'issues' &&
        github.event.issue.title != '' &&
        contains(github.event.issue.title, 'Update from Airtable:')
      
    steps:
      - name: Debug Event Information
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Issue Title: '${{ github.event.issue.title }}'"
          echo "Issue Body: '${{ github.event.issue.body }}'"
          echo "Full GitHub Event Payload:"
          echo '${{ toJson(github.event) }}'
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Parse issue body and update GitHub Variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read issue body
          BODY="${{ github.event.issue.body }}"

          # Process each line (expected format: KEY=VALUE)
          while IFS='=' read -r KEY VALUE; do
            [ -z "$KEY" ] && continue  # Skip empty lines

            # Trim whitespace
            KEY=$(echo "$KEY" | xargs)
            VALUE=$(echo "$VALUE" | xargs)

            echo "Updating variable '$KEY' with value '$VALUE'"

            # PATCH request to update GitHub Actions variables
            curl -s -X PATCH \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/variables/${KEY}" \
              -d "{\"name\":\"${KEY}\",\"value\":\"${VALUE}\"}"
          done <<< "$BODY"

      - name: Close the issue after updating variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Closing issue #${{ github.event.issue.number }}..."
          curl -s -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" \
            -d '{"state":"closed"}'

  build:
    runs-on: ubuntu-latest
    needs: update-variables  # Ensure variables are updated first
    if: always()  # ✅ Ensures it runs even if update-variables is skipped

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.3'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Replace placeholders in mkdocs.yml
      env: 
        CPU_NUMBER: ${{ vars.CPU_NUMBER }}
        RAM: ${{ vars.RAM }}
        STORAGE: ${{ vars.STORAGE }}
      run: |
        sed -i "s/CPU_NUMBER_PLACEHOLDER/$CPU_NUMBER/g" mkdocs.yml
        sed -i "s/RAM_PLACEHOLDER/$RAM/g" mkdocs.yml
        sed -i "s/STORAGE_PLACEHOLDER/$STORAGE/g" mkdocs.yml

    - name: Debug placeholder replacement
      run: |
        echo "mkdocs.yml after placeholder replacement:"
        cat mkdocs.yml

    - name: Build MkDocs site
      run: mkdocs build --clean

    - name: Upload Site Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: site
        path: site/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: always()  # ✅ Ensures deploy runs even if build was skipped

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Site Artifacts
      uses: actions/download-artifact@v4
      with:
        name: site

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.MY_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
        echo "${{ secrets.MY_SSH_KEY }}" | base64 --decode > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy to Stanford Hosts
      run: |
        ssh -i ~/.ssh/id_rsa rcpediaq@rcpedia-qa.su.domains "rm -rf /home/rcpediaq/rcpedia-dev.stanford.edu/*"
        scp -i ~/.ssh/id_rsa -r ${{ github.workspace }}/* rcpediaq@rcpedia-qa.su.domains:/home/rcpediaq/rcpedia-dev.stanford.edu
